In CSS, transitions allow you to change property values smoothly (over a specified duration) when a state change occurs, such as hovering over an element or when it's focused. They provide a way to add subtle animations and make user interactions more engaging. Here's a basic overview of how transitions work:

1. **Defining Transitions**: You define transitions using the `transition` property. It takes four values: `property`, `duration`, `timing-function`, and `delay`. The most basic form looks like this:

    ```css
    .element {
        transition: <property> <duration> <timing-function> <delay>;
    }
    ```

    - `property`: Specifies which CSS property you want to apply the transition to. For example, `color`, `background`, `opacity`, etc.
    - `duration`: Specifies how long the transition should take to complete, usually in seconds (s) or milliseconds (ms).
    - `timing-function`: Specifies the speed curve of the transition. Common values are `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`, etc.
    - `delay`: Specifies a delay before the transition starts.

2. **Triggering Transitions**: Transitions are typically triggered by changes in state, such as when an element gains or loses focus, when the mouse hovers over it, or when a class is added or removed. For example:

    ```css
    .element {
        background-color: blue;
        transition: background-color 0.3s ease;
    }
    
    .element:hover {
        background-color: red;
    }
    ```

    In this example, when you hover over `.element`, the background color smoothly transitions from blue to red over a duration of 0.3 seconds with an easing effect.

3. **Applying Transitions to Multiple Properties**: You can apply transitions to multiple properties by separating them with commas. For example:

    ```css
    .element {
        transition: background-color 0.3s ease, color 0.3s ease;
    }
    ```

    This will apply the same transition duration and timing function to both the `background-color` and `color` properties.

4. **Transitions with Multiple States**: You can define transitions for multiple states of an element, such as `:hover`, `:active`, `:focus`, etc., providing different transition effects for each state.

Transitions are powerful tools for adding simple animations and enhancing user experience on websites and web applications. They can be combined with other CSS features like animations and keyframes for more complex effects.